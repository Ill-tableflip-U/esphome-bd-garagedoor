esphome:
  name: garage-sensor
  friendly_name: Garage sensor

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf
    sdkconfig_options: 
      CONFIG_BT_BLE_42_FEATURES_SUPPORTED: y
      CONFIG_BT_BLE_50_FEATURES_SUPPORTED: y
      CONFIG_ESP_TASK_WDT_TIMEOUT_S: "10"

# Enable logging
logger:
  baud_rate: 0
# Enable Home Assistant API
api:
  encryption:
    key: "xxxx"
  on_client_connected:
     - esp32_ble_tracker.start_scan:
        continuous: true
  on_client_disconnected:
    if:
      condition:
        not:
          api.connected:
      then:
        - esp32_ble_tracker.stop_scan:
esp32_ble_tracker:
  scan_parameters:
    # Don't auto start BLE scanning, we control it in the `api` block's automation.
    continuous: False
    
    active: True  # send scan-request packets to gather more info, like device name for some devices.

    interval: 320ms  # default 320ms - how long to spend on each advert channel
    window:   300ms  # default 30ms - how long to actually "listen" in each interval. Reduce this if device is unstable.
    # If the device cannot keep up or becomes unstable, reduce the "window" setting. This may be
    # required if your device is controlling other sensors or doing PWM for lights etc.
bluetooth_proxy:
  active: true  # allows outbound connections from HA to devices.

sensor:
  - platform: uptime
    # The uptime sensor is extremely helpful to know if your device is rebooting
    # when it shouldn't be. This might indicate your interval-to-window timing is
    # too tight, and the window needs to be reduced.
    name: "Uptime Sensor"
    update_interval: 60s
ota:
  - platform: esphome
    password: "xxxx"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    # Set this to the IP of the ESP
    static_ip: 10.1.1.53
    # Set this to the IP address of the router. Often ends with .1
    gateway: 10.1.1.1
    # The subnet of the network. 255.255.255.0 works for most home networks.
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Garage-Sensor Fallback Hotspot"
    password: "xxxx"

captive_portal:
globals:
  - id: garage1moving
    type: bool
    restore_value: no
    initial_value: "false"
  - id: garage2moving
    type: bool
    restore_value: no
    initial_value: "false"
  

output:
  - platform: gpio
    id: garage1control
    pin: 10
    inverted: True
  - platform: gpio
    id: garage2control
    pin: 20
    inverted: True

light:
  - platform: esp32_rmt_led_strip
    chipset: ws2812
    id: status
    pin: 4
    num_leds: 1
    rmt_channel: 0
    rgb_order: GRB
binary_sensor:
  - platform: gpio
    pin: 21
    name: "Motion"
    device_class: motion
  - platform: gpio
    pin: 
      mode: 
        input: True
        pullup: True
      number: 2
      inverted: True
    id: garage1status
    name: Garage 1 closed
    
  - platform: gpio
    pin: 
      mode: 
        input: True
        pullup: True
      number: 7
      inverted: True
    id: garage2status
    name: Garage 2 closed

cover:
  - platform: template
    name: "Garage Door 1"
    open_action: 
      then:
        - if: 
            condition: 
              and:
                - binary_sensor.is_on: garage1status
                - not:
                    lambda: "return id(garage1moving);"
            then: 
              - logger.log: "continuing!!!!!"
              - globals.set:
                  id: garage1moving
                  value: 'true'
              - output.turn_on: garage1control
              - delay: 0.1s
              - output.turn_off: garage1control
              - light.turn_on:
                  id: status
                  brightness: 100%
                  red: 100%
                  green: 100%
                  blue: 0%
              
              - delay: 20s
              - if:
                  condition:
                    - binary_sensor.is_off: garage1status
                  then: 
                    - light.turn_on:
                        id: status
                        brightness: 100%
                        red: 100%
                        green: 100%
                        blue: 100%
                    - globals.set:
                        id: garage1moving
                        value: 'false'
                  else: 
                    - light.turn_on:
                        id: status
                        brightness: 100%
                        red: 100%
                        green: 0%
                        blue: 0%
                    - globals.set:
                        id: garage1moving
                        value: 'false'
              - delay: 2min
              - light.turn_off: status
            else:
              - delay: 20s
              - globals.set:
                  id: garage1moving
                  value: 'false'
              - light.turn_on:
                  id: status
                  brightness: 100%
                  red: 100%
                  green: 100%
                  blue: 100%

    close_action: 
      then:
        - if: 
            condition:
              not:
                lambda: "return id(garage1moving);"
            then:
                    
              - globals.set:
                  id: garage1moving
                  value: 'true'
              - repeat: 
                  count: 3
                  then:
                    - if: 
                        condition: 
                          and:
                            - binary_sensor.is_off: garage1status

                        then: 
                          - logger.log: "now CLOSING THE DOOR"
                          - output.turn_on: garage1control
                          - delay: 0.1s
                          - output.turn_off: garage1control
                          - light.turn_on:
                              id: status
                              brightness: 100%
                              red: 100%
                              green: 100%
                              blue: 0%
                          - delay: 20s
                          - if:
                              condition:
                                - binary_sensor.is_on: garage1status
                              then: 
                                - light.turn_on:
                                    id: status
                                    brightness: 100%
                                    red: 100%
                                    green: 100%
                                    blue: 100%

                              else: 
        
                                - light.turn_on:
                                    id: status
                                    brightness: 100%
                                    red: 100%
                                    green: 0%
                                    blue: 0%
              - globals.set:
                  id: garage1moving
                  value: 'false'
              - delay: 10min
              - light.turn_off: status
            else:
              - delay: 20s
              - globals.set:
                  id: garage1moving
                  value: 'false'
              - light.turn_on:
                  id: status
                  brightness: 100%
                  red: 100%
                  green: 100%
                  blue: 100%
    optimistic: true
    assumed_state: true

  - platform: template
    name: "Garage Door 2"
    open_action: 
      then:
        - if: 
            condition: 
              and:
                - binary_sensor.is_on: garage2status
                - not:
                    lambda: "return id(garage2moving);"
            then: 
              - logger.log: "continuing!!!!!"
              - globals.set:
                  id: garage2moving
                  value: 'true'
              - output.turn_on: garage2control
              - delay: 0.1s
              - output.turn_off: garage2control
              - light.turn_on:
                  id: status
                  brightness: 100%
                  red: 100%
                  green: 100%
                  blue: 0%
              
              - delay: 20s
              - if:
                  condition:
                    - binary_sensor.is_off: garage2status
                  then: 
                    - light.turn_on:
                        id: status
                        brightness: 100%
                        red: 100%
                        green: 100%
                        blue: 100%
                    - globals.set:
                        id: garage2moving
                        value: 'false'
                  else: 
                    - light.turn_on:
                        id: status
                        brightness: 100%
                        red: 100%
                        green: 0%
                        blue: 0%
                    - globals.set:
                        id: garage2moving
                        value: 'false'
              - delay: 2min
              - light.turn_off: status
            else:
              - delay: 20s
              - globals.set:
                  id: garage2moving
                  value: 'false'
              - light.turn_on:
                  id: status
                  brightness: 100%
                  red: 100%
                  green: 100%
                  blue: 100%

    close_action: 
      then:
        - if: 
            condition:
              not:
                lambda: "return id(garage2moving);"
            then:
                    
              - globals.set:
                  id: garage2moving
                  value: 'true'
              - repeat: 
                  count: 3
                  then:
                    - if: 
                        condition: 
                          and:
                            - binary_sensor.is_off: garage2status

                        then: 
                          - logger.log: "now CLOSING THE DOOR"
                          - output.turn_on: garage2control
                          - delay: 0.1s
                          - output.turn_off: garage2control
                          - light.turn_on:
                              id: status
                              brightness: 100%
                              red: 100%
                              green: 100%
                              blue: 0%
                          - delay: 20s
                          - if:
                              condition:
                                - binary_sensor.is_on: garage2status
                              then: 
                                - light.turn_on:
                                    id: status
                                    brightness: 100%
                                    red: 100%
                                    green: 100%
                                    blue: 100%

                              else: 
        
                                - light.turn_on:
                                    id: status
                                    brightness: 100%
                                    red: 100%
                                    green: 0%
                                    blue: 0%
              - globals.set:
                  id: garage2moving
                  value: 'false'
              - delay: 10min
              - light.turn_off: status
            else:
              - delay: 20s
              - globals.set:
                  id: garage2moving
                  value: 'false'
              - light.turn_on:
                  id: status
                  brightness: 100%
                  red: 100%
                  green: 100%
                  blue: 100%
    optimistic: true
    assumed_state: true
